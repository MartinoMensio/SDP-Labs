System and Device Programming
Laboratory Week 09

Laboratory target:
Ex 01: Familiarize with the Visual Studio Program Environment
Ex 02: UNICODE familiarization and generation of a binary file
       for exercise #3.
Ex 03: Random Record Update of a Binary File


 
Exercise 01
-----------

The following program copies a file, whose name is received as
first parameter on the command line, into another file, whose
name is passed as the second parameter on the command line.

========================================================================

#include <windows.h>
#include <tchar.h>
#include <stdio.h>

#define BUF_SIZE 100

INT _tmain (INT argc, LPTSTR argv [])
{
  HANDLE Hon, hOut;
  DWORD nIn, nOut;
  CHAR buffer [BUF_SIZE];

  if (argc != 3) {
    fprintf (stderr, "Usage: cp file1 file2\n");
    return 1;
  }

  hIn = CreateFile (argv[1], GENERIC_READ, FILE_SHARE_READ, NULL,
    OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);
  if (hIn == INVALID_HANDLE_VALUE) {
    fprintf (stderr, "Cannot open input file. Error: %x\n", GetLastError ());
    return 2;
  }

  hOut = CreateFile (argv[2], GENERIC_WRITE, 0, NULL,
    CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL);
  if (hOut == INVALID_HANDLE_VALUE) {
    fprintf (stderr, "Cannot open output file. Error: %x\n", GetLastError ());
    CloseHandle(hIn);
    return 3;
  }

  while (ReadFile (hIn, buffer, BUF_SIZE, &nIn, NULL) && nIn > 0) {
    WriteFile (hOut, buffer, BUF_SIZE, &nOut, NULL);
    if (nIn != nOut) {
      fprintf (stderr, "Fatal write error: %x\n", GetLastError ());
      CloseHandle(hIn); CloseHandle(hOut);
      return 4;
    }
  }

  CloseHandle (hIn);
  CloseHandle (hOut);
  return 0;
}

========================================================================

Perform the following steps:
- Cut-and-paste the program into a .cpp file
- Create a new project and compile the program within the MS Visual
  Studio environment.
- Set the command line parameters and run it
- As it contains a bug, debug it using the basic features of
  the Visual Studio debugger.
  Learn how to:
  - set a break-point in the code
  - proceed step-by-step
  - visualize variable values
  - etc.



Exercise 02
-----------

An ASCII file has lines with the following format:
- an identifier, i.e., an integer value varying from 1 to the number
  of rows in the file (e.g., 1, 2, etc.)
- a register number, i.e., a long integer of 6 digits (e.g., 164678)
- a surname, i.e., a string of maximum 30 characters (e.g., Rossi)
- a name, i.e., a string of maximum 30 characters (e.g., Mario)
- an examination mark, i.e., an integer value.

The following is a correct example of such a file:

1 100000 Romano Antonio 25
2 150000 Fabrizi Aldo 22
3 200000 Verdi Giacomo 15
4 250000 Rossi Luigi 30

Write a C program in the MS Visual Studio environment which, using the
UNICODE format, reads such a file and produce a *binary* file with the
same content but *fixed-length* records.
Input and output file names are passed on the command line.


Suggestions:
- Read the input file on a field by field basis, using the _ftscanf
  construct (see the tchar.h file)
- Store fields within a proper C data structure ("struct student" with
  fields for id, register number, etc.)
- Store the structure onto the output file as a unique object
  using the WriteFile function.

- To be sure the binary file has been stored in a proper way, re-read
  it and print it out on standard output (this step is useful before
  proceeding to Exercise number 3).



Exercise 03 (versions A, B, and C)
----------------------------------

A data base is given on a single *binary* file with
*fixed-length* records.
The format of the file is the one *generated in Exercise 2*.

The program has to implement a user menu, where the user can give the
following command:
- R: Read the data of a student in a random way
- W: Write (or modify) the data of a student in random way (co.
- E: End the program.
The input file name is given on the command line.

The following is an example of execution:

user choice: R 3     // the user want to read data of student 3
3 200000 Verdi Giacomo 15
user choice: R 1     // the user want to read data of student 1
1 100000 Romano Antonio 25
user choice: W 1     // the user want to over-write data of student 1
1 100000 Romano Antonio 27
user choice: W 5     // the user want to add data of student 5
5 157143 White House 30
user choice: E       // the user want to end
stop program

Where noticed that
1) the input file is supposed to be the one specified in the
   previous exercise, but in binary form
2) "//" specifies explanatory comments not program I/O lines.

Write three versions of the program:
- Version A
  read the file using file pointers
- Version B
  read the file using an overlapped data structure 
- Version C
  [FOR FUTURE DEVELOPMENT, i.e., after file locking has been
  introduced.]
  lock each record before reading (or writing) it, and release the
  same record as soon as the operation has been performed.
  (Notice that locking for now is useless, but it will be useful with
  multi-threaded applications).
